#include "mainFrame.h"
#include "aboutdlg.h"
#include "global.h"
#include "canvas.h"
#include <atlmisc.h>
extern CAppModule _Module;
//
BOOL CMainFrame::PreTranslateMessage(MSG* pMsg)
{
	if(CFrameWindowImpl<CMainFrame>::PreTranslateMessage(pMsg))
		return TRUE;

	return m_view.PreTranslateMessage(pMsg);
}

BOOL CMainFrame::OnIdle()
{
	static u32 oldTime = GetTickCount();
	u32 currentTim = GetTickCount();

	UIUpdateToolBar();

	//
	if (_canvas)
	{
		_canvas->update(currentTim - oldTime);
		_canvas->render();
	}
	oldTime = currentTim;
	return FALSE;
}

LRESULT CMainFrame::OnCreate(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/)
{
	// Check if Common Controls 6.0 are used. If yes, use 32-bit (alpha) images
	// for the toolbar and command bar. If not, use the old, 4-bit images.
	UINT uResID = IDR_MAINFRAME_OLD;
	DWORD dwMajor = 0;
	DWORD dwMinor = 0;
	HRESULT hRet = AtlGetCommCtrlVersion(&dwMajor, &dwMinor);
	if(SUCCEEDED(hRet) && dwMajor >= 6)
		uResID = IDR_MAINFRAME;

	// Set values to be displayed in the view window
	m_view.m_dwCommCtrlMajor = dwMajor;
	m_view.m_dwCommCtrlMinor = dwMinor;
	m_view.m_bAlpha = (uResID == IDR_MAINFRAME);

	// create command bar window
	HWND hWndCmdBar = m_CmdBar.Create(m_hWnd, rcDefault, NULL, ATL_SIMPLE_CMDBAR_PANE_STYLE);
	// attach menu
	m_CmdBar.AttachMenu(GetMenu());
	// load command bar images
	m_CmdBar.LoadImages(uResID);
	// remove old menu
	SetMenu(NULL);

	HWND hWndToolBar = CreateSimpleToolBarCtrl(m_hWnd, uResID, FALSE, ATL_SIMPLE_TOOLBAR_PANE_STYLE);

	CreateSimpleReBar(ATL_SIMPLE_REBAR_NOBORDER_STYLE);
	AddSimpleReBarBand(hWndCmdBar);
	AddSimpleReBarBand(hWndToolBar, NULL, TRUE);
	CreateSimpleStatusBar();

	//
	{
		// client rect for vertical splitter
		CRect rcVert;
		GetClientRect(&rcVert);

		// create the vertical splitter
		m_vSplit.Create(*this, rcDefault, NULL, 0, WS_EX_CLIENTEDGE);
		m_hWndClient = m_vSplit;
		// set the vertical splitter parameters
		//m_vSplit.m_cxyMin = 35; // minimum size
		m_vSplit.SetSplitterPos(200); // from left
		//m_vSplit.m_bFullDrag = false; // ghost bar enabled
		//
		{
			//
			//m_tvCtrl.Create(m_vSplit, rcDefault);

			// create the left container
 			m_rPane.Create(m_vSplit, "canvas");
 
 			// add container to left pane (0) of vertical splitter
 			m_vSplit.SetSplitterPane(SPLIT_PANE_RIGHT, m_rPane);

			//
			m_view.Create(m_rPane, rcDefault, NULL, WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN, WS_EX_CLIENTEDGE);
			m_rPane.SetClient(m_view);
		}
		//
		{
			// create the left container
			m_lPane.Create(m_vSplit, "list");

			// add container to left pane (0) of vertical splitter
			m_vSplit.SetSplitterPane(SPLIT_PANE_LEFT, m_lPane);
			//
			m_tvCtrl.Create(m_lPane, rcDefault);
		}
	}

	UpdateLayout();

	UIAddToolBar(hWndToolBar);
	UISetCheck(ID_VIEW_TOOLBAR, 1);
	UISetCheck(ID_VIEW_RENDER_BAR, 1);
	UISetCheck(ID_VIEW_STATUS_BAR, 1);

	// register object for message filtering and idle updates
	CMessageLoop* pLoop = _Module.GetMessageLoop();
	ATLASSERT(pLoop != NULL);
	pLoop->AddMessageFilter(this);
	pLoop->AddIdleHandler(this);

	UIEnable(ID_EDIT_PASTE, FALSE);

	_canvas = NULL;
	//
	return 0;
}

LRESULT CMainFrame::OnFileExit(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	PostMessage(WM_CLOSE);
	return 0;
}
std::string standardFilePath(const std::string& path)
{
	std::string p = path;
	for (size_t i = 0; i != path.size(); ++i)
	{
		if (path[i] == '\\')
		{
			p[i] = '/';
		}
	}
	return p;
}
LRESULT CMainFrame::OnFileOpen(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	// TODO: add code to initialize document
	CFileDialog fd(true, "entity", NULL, OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, _T("Plato Documents (*.group;*.entity;*.mesh;*.mz)\0*.group;*.entity;*.mesh;*.mz\0All Files (*.*)\0*.*\0"));
	if (fd.DoModal() == IDOK)
	{
		std::string buf(512, 0);
		buf = fd.m_szFileName;
		if (!buf.empty() && _canvas)
		{
			_canvas->changeModelFile(standardFilePath(buf));
		}
	}
	return 0;
}
LRESULT CMainFrame::OnFileNew(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	// TODO: add code to initialize document
#if 0
	CColorDialog cd;
	if (cd.DoModal() == IDOK)
	{
		COLORREF c = cd.GetColor();
		Euclid::Color e;
		e.setABGR(c);
		if (!RenderEngineImp::isNull())
		{
			RenderEngineImp::getInstancePtr()->setClearColor(e);
		}
	}
#endif

	//
	return 0;
}

LRESULT CMainFrame::OnEditCutOrCopy(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	// Just to test enabled/disabled image state - toggle Paste button
	static BOOL bEnabled = FALSE;
	bEnabled = !bEnabled;
	UIEnable(ID_EDIT_PASTE, bEnabled);
	return 0;
}

LRESULT CMainFrame::OnViewToolBar(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	static BOOL bVisible = TRUE;	// initially visible
	bVisible = !bVisible;
	CReBarCtrl rebar = m_hWndToolBar;
	int nBandIndex = rebar.IdToIndex(ATL_IDW_BAND_FIRST + 1);	// toolbar is 2nd added band
	rebar.ShowBand(nBandIndex, bVisible);
	UISetCheck(ID_VIEW_TOOLBAR, bVisible);
	UpdateLayout();
	return 0;
}

LRESULT CMainFrame::OnViewStatusBar(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	BOOL bVisible = !::IsWindowVisible(m_hWndStatusBar);
	::ShowWindow(m_hWndStatusBar, bVisible ? SW_SHOWNOACTIVATE : SW_HIDE);
	UISetCheck(ID_VIEW_STATUS_BAR, bVisible);
	UpdateLayout();
	return 0;
}

LRESULT CMainFrame::OnAppAbout(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
{
	CAboutDlg dlg;
	dlg.DoModal();
	return 0;
}
LRESULT CMainFrame::OnDestroy(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& bHandled)
{
	if (_canvas)
	{
		_canvas->destroy();
		delete _canvas;
		_canvas = NULL;
	}
	bHandled = false;
	
	return 0;
}

LRESULT CMainFrame::OnPaint( UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& bHandled )
{
	bHandled = false;
	//
	if (NULL == _canvas)
	{
		_canvas = new Canvas(m_view.m_hWnd);
	}

	return 0;
}

LRESULT CMainFrame::OnFileSave( WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/ )
{
	// TODO: add code to initialize document
	CFileDialog fd(false, "entity", NULL, OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, _T("Plato Documents (*.group;*.entity;*.mesh;*.mz;*.animation)\0*.group;*.entity;*.mesh;*.mz;*.animation\0All Files (*.*)\0*.*\0"));
	if (fd.DoModal() == IDOK)
	{
		std::string buf(512, 0);
		buf = fd.m_szFileName;
		if (!buf.empty() && _canvas)
		{
			_canvas->saveFile(buf);
		}
	}
	return 0;
}